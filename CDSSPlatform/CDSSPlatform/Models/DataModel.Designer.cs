//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Data.EntityClient;
using System.ComponentModel;
using System.Xml.Serialization;
using System.Runtime.Serialization;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("DataModel", "PatientBasicInfoVisitRecord", "PatientBasicInfo", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(CDSSPlatform.Models.PatientBasicInfo), "VisitRecord", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(CDSSPlatform.Models.VisitRecord), true)]
[assembly: EdmRelationshipAttribute("DataModel", "VisitRecordHeadacheDrug", "VisitRecord", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(CDSSPlatform.Models.VisitRecord), "HeadacheDrug", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(CDSSPlatform.Models.HeadacheDrug), true)]
[assembly: EdmRelationshipAttribute("DataModel", "VisitRecordHeadacheOverView", "VisitRecord", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(CDSSPlatform.Models.VisitRecord), "HeadacheOverView", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(CDSSPlatform.Models.HeadacheOverView))]
[assembly: EdmRelationshipAttribute("DataModel", "VisitRecordHeacheDiagnosis", "VisitRecord", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(CDSSPlatform.Models.VisitRecord), "HeacheDiagnosis", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(CDSSPlatform.Models.HeacheDiagnosis))]
[assembly: EdmRelationshipAttribute("DataModel", "HeadacheOverViewHeadacheCompanion", "HeadacheOverView", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(CDSSPlatform.Models.HeadacheOverView), "HeadacheCompanion", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(CDSSPlatform.Models.HeadacheCompanion), true)]
[assembly: EdmRelationshipAttribute("DataModel", "HeadacheOverViewHeadacheProdrome", "HeadacheOverView", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(CDSSPlatform.Models.HeadacheOverView), "HeadacheProdrome", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(CDSSPlatform.Models.HeadacheProdrome), true)]
[assembly: EdmRelationshipAttribute("DataModel", "HeadacheOverViewHeadachePlace", "HeadacheOverView", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(CDSSPlatform.Models.HeadacheOverView), "HeadachePlace", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(CDSSPlatform.Models.HeadachePlace), true)]
[assembly: EdmRelationshipAttribute("DataModel", "VisitRecordPreviousDrug", "VisitRecord", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(CDSSPlatform.Models.VisitRecord), "PreviousDrug", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(CDSSPlatform.Models.PreviousDrug), true)]
[assembly: EdmRelationshipAttribute("DataModel", "VisitRecordlifestylePredisposing", "VisitRecord", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(CDSSPlatform.Models.VisitRecord), "lifestylePredisposing", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(CDSSPlatform.Models.RelateInformation))]

#endregion

namespace CDSSPlatform.Models
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class DataModelContainer : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new DataModelContainer object using the connection string found in the 'DataModelContainer' section of the application configuration file.
        /// </summary>
        public DataModelContainer() : base("name=DataModelContainer", "DataModelContainer")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new DataModelContainer object.
        /// </summary>
        public DataModelContainer(string connectionString) : base(connectionString, "DataModelContainer")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new DataModelContainer object.
        /// </summary>
        public DataModelContainer(EntityConnection connection) : base(connection, "DataModelContainer")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<PatientBasicInfo> PatientBasicInfoSet
        {
            get
            {
                if ((_PatientBasicInfoSet == null))
                {
                    _PatientBasicInfoSet = base.CreateObjectSet<PatientBasicInfo>("PatientBasicInfoSet");
                }
                return _PatientBasicInfoSet;
            }
        }
        private ObjectSet<PatientBasicInfo> _PatientBasicInfoSet;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<VisitRecord> VisitRecordSet
        {
            get
            {
                if ((_VisitRecordSet == null))
                {
                    _VisitRecordSet = base.CreateObjectSet<VisitRecord>("VisitRecordSet");
                }
                return _VisitRecordSet;
            }
        }
        private ObjectSet<VisitRecord> _VisitRecordSet;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<HeadacheOverView> HeadacheOverViewSet
        {
            get
            {
                if ((_HeadacheOverViewSet == null))
                {
                    _HeadacheOverViewSet = base.CreateObjectSet<HeadacheOverView>("HeadacheOverViewSet");
                }
                return _HeadacheOverViewSet;
            }
        }
        private ObjectSet<HeadacheOverView> _HeadacheOverViewSet;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<HeacheDiagnosis> HeacheDiagnosisSet
        {
            get
            {
                if ((_HeacheDiagnosisSet == null))
                {
                    _HeacheDiagnosisSet = base.CreateObjectSet<HeacheDiagnosis>("HeacheDiagnosisSet");
                }
                return _HeacheDiagnosisSet;
            }
        }
        private ObjectSet<HeacheDiagnosis> _HeacheDiagnosisSet;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<HeadacheDrug> HeadacheDrugSet
        {
            get
            {
                if ((_HeadacheDrugSet == null))
                {
                    _HeadacheDrugSet = base.CreateObjectSet<HeadacheDrug>("HeadacheDrugSet");
                }
                return _HeadacheDrugSet;
            }
        }
        private ObjectSet<HeadacheDrug> _HeadacheDrugSet;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<HeadacheCompanion> HeadacheCompanionSet
        {
            get
            {
                if ((_HeadacheCompanionSet == null))
                {
                    _HeadacheCompanionSet = base.CreateObjectSet<HeadacheCompanion>("HeadacheCompanionSet");
                }
                return _HeadacheCompanionSet;
            }
        }
        private ObjectSet<HeadacheCompanion> _HeadacheCompanionSet;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<HeadacheProdrome> HeadacheProdromeSet
        {
            get
            {
                if ((_HeadacheProdromeSet == null))
                {
                    _HeadacheProdromeSet = base.CreateObjectSet<HeadacheProdrome>("HeadacheProdromeSet");
                }
                return _HeadacheProdromeSet;
            }
        }
        private ObjectSet<HeadacheProdrome> _HeadacheProdromeSet;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<HeadachePlace> HeadachePlaceSet
        {
            get
            {
                if ((_HeadachePlaceSet == null))
                {
                    _HeadachePlaceSet = base.CreateObjectSet<HeadachePlace>("HeadachePlaceSet");
                }
                return _HeadachePlaceSet;
            }
        }
        private ObjectSet<HeadachePlace> _HeadachePlaceSet;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<PreviousDrug> PreviousDrugSet
        {
            get
            {
                if ((_PreviousDrugSet == null))
                {
                    _PreviousDrugSet = base.CreateObjectSet<PreviousDrug>("PreviousDrugSet");
                }
                return _PreviousDrugSet;
            }
        }
        private ObjectSet<PreviousDrug> _PreviousDrugSet;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<RelateInformation> RelateInformationSet
        {
            get
            {
                if ((_RelateInformationSet == null))
                {
                    _RelateInformationSet = base.CreateObjectSet<RelateInformation>("RelateInformationSet");
                }
                return _RelateInformationSet;
            }
        }
        private ObjectSet<RelateInformation> _RelateInformationSet;

        #endregion
        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the PatientBasicInfoSet EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToPatientBasicInfoSet(PatientBasicInfo patientBasicInfo)
        {
            base.AddObject("PatientBasicInfoSet", patientBasicInfo);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the VisitRecordSet EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToVisitRecordSet(VisitRecord visitRecord)
        {
            base.AddObject("VisitRecordSet", visitRecord);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the HeadacheOverViewSet EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToHeadacheOverViewSet(HeadacheOverView headacheOverView)
        {
            base.AddObject("HeadacheOverViewSet", headacheOverView);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the HeacheDiagnosisSet EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToHeacheDiagnosisSet(HeacheDiagnosis heacheDiagnosis)
        {
            base.AddObject("HeacheDiagnosisSet", heacheDiagnosis);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the HeadacheDrugSet EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToHeadacheDrugSet(HeadacheDrug headacheDrug)
        {
            base.AddObject("HeadacheDrugSet", headacheDrug);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the HeadacheCompanionSet EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToHeadacheCompanionSet(HeadacheCompanion headacheCompanion)
        {
            base.AddObject("HeadacheCompanionSet", headacheCompanion);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the HeadacheProdromeSet EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToHeadacheProdromeSet(HeadacheProdrome headacheProdrome)
        {
            base.AddObject("HeadacheProdromeSet", headacheProdrome);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the HeadachePlaceSet EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToHeadachePlaceSet(HeadachePlace headachePlace)
        {
            base.AddObject("HeadachePlaceSet", headachePlace);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the PreviousDrugSet EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToPreviousDrugSet(PreviousDrug previousDrug)
        {
            base.AddObject("PreviousDrugSet", previousDrug);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the RelateInformationSet EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToRelateInformationSet(RelateInformation relateInformation)
        {
            base.AddObject("RelateInformationSet", relateInformation);
        }

        #endregion
    }
    

    #endregion
    
    #region Entities
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="DataModel", Name="HeacheDiagnosis")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class HeacheDiagnosis : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new HeacheDiagnosis object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="cDSSResult">Initial value of the CDSSResult property.</param>
        /// <param name="cLinicalResult">Initial value of the CLinicalResult property.</param>
        public static HeacheDiagnosis CreateHeacheDiagnosis(global::System.Int32 id, global::System.String cDSSResult, global::System.String cLinicalResult)
        {
            HeacheDiagnosis heacheDiagnosis = new HeacheDiagnosis();
            heacheDiagnosis.Id = id;
            heacheDiagnosis.CDSSResult = cDSSResult;
            heacheDiagnosis.CLinicalResult = cLinicalResult;
            return heacheDiagnosis;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String CDSSResult
        {
            get
            {
                return _CDSSResult;
            }
            set
            {
                OnCDSSResultChanging(value);
                ReportPropertyChanging("CDSSResult");
                _CDSSResult = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("CDSSResult");
                OnCDSSResultChanged();
            }
        }
        private global::System.String _CDSSResult;
        partial void OnCDSSResultChanging(global::System.String value);
        partial void OnCDSSResultChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String CLinicalResult
        {
            get
            {
                return _CLinicalResult;
            }
            set
            {
                OnCLinicalResultChanging(value);
                ReportPropertyChanging("CLinicalResult");
                _CLinicalResult = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("CLinicalResult");
                OnCLinicalResultChanged();
            }
        }
        private global::System.String _CLinicalResult;
        partial void OnCLinicalResultChanging(global::System.String value);
        partial void OnCLinicalResultChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DataModel", "VisitRecordHeacheDiagnosis", "VisitRecord")]
        public VisitRecord VisitRecord
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<VisitRecord>("DataModel.VisitRecordHeacheDiagnosis", "VisitRecord").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<VisitRecord>("DataModel.VisitRecordHeacheDiagnosis", "VisitRecord").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<VisitRecord> VisitRecordReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<VisitRecord>("DataModel.VisitRecordHeacheDiagnosis", "VisitRecord");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<VisitRecord>("DataModel.VisitRecordHeacheDiagnosis", "VisitRecord", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="DataModel", Name="HeadacheCompanion")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class HeadacheCompanion : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new HeadacheCompanion object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="headacheOverViewId">Initial value of the HeadacheOverViewId property.</param>
        /// <param name="companion">Initial value of the Companion property.</param>
        public static HeadacheCompanion CreateHeadacheCompanion(global::System.Int32 id, global::System.Int32 headacheOverViewId, global::System.String companion)
        {
            HeadacheCompanion headacheCompanion = new HeadacheCompanion();
            headacheCompanion.Id = id;
            headacheCompanion.HeadacheOverViewId = headacheOverViewId;
            headacheCompanion.Companion = companion;
            return headacheCompanion;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 HeadacheOverViewId
        {
            get
            {
                return _HeadacheOverViewId;
            }
            set
            {
                OnHeadacheOverViewIdChanging(value);
                ReportPropertyChanging("HeadacheOverViewId");
                _HeadacheOverViewId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("HeadacheOverViewId");
                OnHeadacheOverViewIdChanged();
            }
        }
        private global::System.Int32 _HeadacheOverViewId;
        partial void OnHeadacheOverViewIdChanging(global::System.Int32 value);
        partial void OnHeadacheOverViewIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Companion
        {
            get
            {
                return _Companion;
            }
            set
            {
                OnCompanionChanging(value);
                ReportPropertyChanging("Companion");
                _Companion = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Companion");
                OnCompanionChanged();
            }
        }
        private global::System.String _Companion;
        partial void OnCompanionChanging(global::System.String value);
        partial void OnCompanionChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DataModel", "HeadacheOverViewHeadacheCompanion", "HeadacheOverView")]
        public HeadacheOverView HeadacheOverView
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<HeadacheOverView>("DataModel.HeadacheOverViewHeadacheCompanion", "HeadacheOverView").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<HeadacheOverView>("DataModel.HeadacheOverViewHeadacheCompanion", "HeadacheOverView").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<HeadacheOverView> HeadacheOverViewReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<HeadacheOverView>("DataModel.HeadacheOverViewHeadacheCompanion", "HeadacheOverView");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<HeadacheOverView>("DataModel.HeadacheOverViewHeadacheCompanion", "HeadacheOverView", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="DataModel", Name="HeadacheDrug")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class HeadacheDrug : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new HeadacheDrug object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="drugcategory">Initial value of the Drugcategory property.</param>
        /// <param name="drugName">Initial value of the DrugName property.</param>
        /// <param name="therapy">Initial value of the Therapy property.</param>
        /// <param name="drugAmount">Initial value of the DrugAmount property.</param>
        /// <param name="visitRecordId">Initial value of the VisitRecordId property.</param>
        public static HeadacheDrug CreateHeadacheDrug(global::System.Int32 id, global::System.String drugcategory, global::System.String drugName, global::System.String therapy, global::System.String drugAmount, global::System.Int32 visitRecordId)
        {
            HeadacheDrug headacheDrug = new HeadacheDrug();
            headacheDrug.Id = id;
            headacheDrug.Drugcategory = drugcategory;
            headacheDrug.DrugName = drugName;
            headacheDrug.Therapy = therapy;
            headacheDrug.DrugAmount = drugAmount;
            headacheDrug.VisitRecordId = visitRecordId;
            return headacheDrug;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Drugcategory
        {
            get
            {
                return _Drugcategory;
            }
            set
            {
                OnDrugcategoryChanging(value);
                ReportPropertyChanging("Drugcategory");
                _Drugcategory = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Drugcategory");
                OnDrugcategoryChanged();
            }
        }
        private global::System.String _Drugcategory;
        partial void OnDrugcategoryChanging(global::System.String value);
        partial void OnDrugcategoryChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String DrugName
        {
            get
            {
                return _DrugName;
            }
            set
            {
                OnDrugNameChanging(value);
                ReportPropertyChanging("DrugName");
                _DrugName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("DrugName");
                OnDrugNameChanged();
            }
        }
        private global::System.String _DrugName;
        partial void OnDrugNameChanging(global::System.String value);
        partial void OnDrugNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Therapy
        {
            get
            {
                return _Therapy;
            }
            set
            {
                OnTherapyChanging(value);
                ReportPropertyChanging("Therapy");
                _Therapy = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Therapy");
                OnTherapyChanged();
            }
        }
        private global::System.String _Therapy;
        partial void OnTherapyChanging(global::System.String value);
        partial void OnTherapyChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String DrugAmount
        {
            get
            {
                return _DrugAmount;
            }
            set
            {
                OnDrugAmountChanging(value);
                ReportPropertyChanging("DrugAmount");
                _DrugAmount = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("DrugAmount");
                OnDrugAmountChanged();
            }
        }
        private global::System.String _DrugAmount;
        partial void OnDrugAmountChanging(global::System.String value);
        partial void OnDrugAmountChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 VisitRecordId
        {
            get
            {
                return _VisitRecordId;
            }
            set
            {
                OnVisitRecordIdChanging(value);
                ReportPropertyChanging("VisitRecordId");
                _VisitRecordId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("VisitRecordId");
                OnVisitRecordIdChanged();
            }
        }
        private global::System.Int32 _VisitRecordId;
        partial void OnVisitRecordIdChanging(global::System.Int32 value);
        partial void OnVisitRecordIdChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DataModel", "VisitRecordHeadacheDrug", "VisitRecord")]
        public VisitRecord VisitRecord
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<VisitRecord>("DataModel.VisitRecordHeadacheDrug", "VisitRecord").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<VisitRecord>("DataModel.VisitRecordHeadacheDrug", "VisitRecord").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<VisitRecord> VisitRecordReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<VisitRecord>("DataModel.VisitRecordHeadacheDrug", "VisitRecord");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<VisitRecord>("DataModel.VisitRecordHeadacheDrug", "VisitRecord", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="DataModel", Name="HeadacheOverView")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class HeadacheOverView : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new HeadacheOverView object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="startTime">Initial value of the StartTime property.</param>
        /// <param name="firstContinue">Initial value of the FirstContinue property.</param>
        /// <param name="headacheQualityScore">Initial value of the HeadacheQualityScore property.</param>
        /// <param name="headahceType">Initial value of the HeadahceType property.</param>
        /// <param name="note">Initial value of the Note property.</param>
        /// <param name="headacehTime">Initial value of the HeadacehTime property.</param>
        /// <param name="headacheTimeUnit">Initial value of the HeadacheTimeUnit property.</param>
        /// <param name="heacheAttachAmount">Initial value of the HeacheAttachAmount property.</param>
        /// <param name="timeFixed">Initial value of the TimeFixed property.</param>
        /// <param name="dayWorsen">Initial value of the DayWorsen property.</param>
        /// <param name="dayPerM">Initial value of the DayPerM property.</param>
        /// <param name="perDay">Initial value of the PerDay property.</param>
        public static HeadacheOverView CreateHeadacheOverView(global::System.Int32 id, global::System.String startTime, global::System.String firstContinue, global::System.String headacheQualityScore, global::System.String headahceType, global::System.String note, global::System.String headacehTime, global::System.String headacheTimeUnit, global::System.String heacheAttachAmount, global::System.String timeFixed, global::System.String dayWorsen, global::System.String dayPerM, global::System.String perDay)
        {
            HeadacheOverView headacheOverView = new HeadacheOverView();
            headacheOverView.Id = id;
            headacheOverView.StartTime = startTime;
            headacheOverView.FirstContinue = firstContinue;
            headacheOverView.HeadacheQualityScore = headacheQualityScore;
            headacheOverView.HeadahceType = headahceType;
            headacheOverView.Note = note;
            headacheOverView.HeadacehTime = headacehTime;
            headacheOverView.HeadacheTimeUnit = headacheTimeUnit;
            headacheOverView.HeacheAttachAmount = heacheAttachAmount;
            headacheOverView.TimeFixed = timeFixed;
            headacheOverView.DayWorsen = dayWorsen;
            headacheOverView.DayPerM = dayPerM;
            headacheOverView.PerDay = perDay;
            return headacheOverView;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String StartTime
        {
            get
            {
                return _StartTime;
            }
            set
            {
                OnStartTimeChanging(value);
                ReportPropertyChanging("StartTime");
                _StartTime = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("StartTime");
                OnStartTimeChanged();
            }
        }
        private global::System.String _StartTime;
        partial void OnStartTimeChanging(global::System.String value);
        partial void OnStartTimeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String FirstContinue
        {
            get
            {
                return _FirstContinue;
            }
            set
            {
                OnFirstContinueChanging(value);
                ReportPropertyChanging("FirstContinue");
                _FirstContinue = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("FirstContinue");
                OnFirstContinueChanged();
            }
        }
        private global::System.String _FirstContinue;
        partial void OnFirstContinueChanging(global::System.String value);
        partial void OnFirstContinueChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String HeadacheQualityScore
        {
            get
            {
                return _HeadacheQualityScore;
            }
            set
            {
                OnHeadacheQualityScoreChanging(value);
                ReportPropertyChanging("HeadacheQualityScore");
                _HeadacheQualityScore = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("HeadacheQualityScore");
                OnHeadacheQualityScoreChanged();
            }
        }
        private global::System.String _HeadacheQualityScore;
        partial void OnHeadacheQualityScoreChanging(global::System.String value);
        partial void OnHeadacheQualityScoreChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String HeadahceType
        {
            get
            {
                return _HeadahceType;
            }
            set
            {
                OnHeadahceTypeChanging(value);
                ReportPropertyChanging("HeadahceType");
                _HeadahceType = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("HeadahceType");
                OnHeadahceTypeChanged();
            }
        }
        private global::System.String _HeadahceType;
        partial void OnHeadahceTypeChanging(global::System.String value);
        partial void OnHeadahceTypeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Note
        {
            get
            {
                return _Note;
            }
            set
            {
                OnNoteChanging(value);
                ReportPropertyChanging("Note");
                _Note = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Note");
                OnNoteChanged();
            }
        }
        private global::System.String _Note;
        partial void OnNoteChanging(global::System.String value);
        partial void OnNoteChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String HeadacehTime
        {
            get
            {
                return _HeadacehTime;
            }
            set
            {
                OnHeadacehTimeChanging(value);
                ReportPropertyChanging("HeadacehTime");
                _HeadacehTime = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("HeadacehTime");
                OnHeadacehTimeChanged();
            }
        }
        private global::System.String _HeadacehTime;
        partial void OnHeadacehTimeChanging(global::System.String value);
        partial void OnHeadacehTimeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String HeadacheTimeUnit
        {
            get
            {
                return _HeadacheTimeUnit;
            }
            set
            {
                OnHeadacheTimeUnitChanging(value);
                ReportPropertyChanging("HeadacheTimeUnit");
                _HeadacheTimeUnit = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("HeadacheTimeUnit");
                OnHeadacheTimeUnitChanged();
            }
        }
        private global::System.String _HeadacheTimeUnit;
        partial void OnHeadacheTimeUnitChanging(global::System.String value);
        partial void OnHeadacheTimeUnitChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String HeacheAttachAmount
        {
            get
            {
                return _HeacheAttachAmount;
            }
            set
            {
                OnHeacheAttachAmountChanging(value);
                ReportPropertyChanging("HeacheAttachAmount");
                _HeacheAttachAmount = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("HeacheAttachAmount");
                OnHeacheAttachAmountChanged();
            }
        }
        private global::System.String _HeacheAttachAmount;
        partial void OnHeacheAttachAmountChanging(global::System.String value);
        partial void OnHeacheAttachAmountChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String TimeFixed
        {
            get
            {
                return _TimeFixed;
            }
            set
            {
                OnTimeFixedChanging(value);
                ReportPropertyChanging("TimeFixed");
                _TimeFixed = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("TimeFixed");
                OnTimeFixedChanged();
            }
        }
        private global::System.String _TimeFixed;
        partial void OnTimeFixedChanging(global::System.String value);
        partial void OnTimeFixedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String DayWorsen
        {
            get
            {
                return _DayWorsen;
            }
            set
            {
                OnDayWorsenChanging(value);
                ReportPropertyChanging("DayWorsen");
                _DayWorsen = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("DayWorsen");
                OnDayWorsenChanged();
            }
        }
        private global::System.String _DayWorsen;
        partial void OnDayWorsenChanging(global::System.String value);
        partial void OnDayWorsenChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String DayPerM
        {
            get
            {
                return _DayPerM;
            }
            set
            {
                OnDayPerMChanging(value);
                ReportPropertyChanging("DayPerM");
                _DayPerM = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("DayPerM");
                OnDayPerMChanged();
            }
        }
        private global::System.String _DayPerM;
        partial void OnDayPerMChanging(global::System.String value);
        partial void OnDayPerMChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String PerDay
        {
            get
            {
                return _PerDay;
            }
            set
            {
                OnPerDayChanging(value);
                ReportPropertyChanging("PerDay");
                _PerDay = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("PerDay");
                OnPerDayChanged();
            }
        }
        private global::System.String _PerDay;
        partial void OnPerDayChanging(global::System.String value);
        partial void OnPerDayChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DataModel", "VisitRecordHeadacheOverView", "VisitRecord")]
        public VisitRecord VisitRecord
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<VisitRecord>("DataModel.VisitRecordHeadacheOverView", "VisitRecord").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<VisitRecord>("DataModel.VisitRecordHeadacheOverView", "VisitRecord").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<VisitRecord> VisitRecordReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<VisitRecord>("DataModel.VisitRecordHeadacheOverView", "VisitRecord");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<VisitRecord>("DataModel.VisitRecordHeadacheOverView", "VisitRecord", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DataModel", "HeadacheOverViewHeadacheCompanion", "HeadacheCompanion")]
        public EntityCollection<HeadacheCompanion> HeadacheCompanion
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<HeadacheCompanion>("DataModel.HeadacheOverViewHeadacheCompanion", "HeadacheCompanion");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<HeadacheCompanion>("DataModel.HeadacheOverViewHeadacheCompanion", "HeadacheCompanion", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DataModel", "HeadacheOverViewHeadacheProdrome", "HeadacheProdrome")]
        public EntityCollection<HeadacheProdrome> HeadacheProdrome
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<HeadacheProdrome>("DataModel.HeadacheOverViewHeadacheProdrome", "HeadacheProdrome");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<HeadacheProdrome>("DataModel.HeadacheOverViewHeadacheProdrome", "HeadacheProdrome", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DataModel", "HeadacheOverViewHeadachePlace", "HeadachePlace")]
        public EntityCollection<HeadachePlace> HeadachePlace
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<HeadachePlace>("DataModel.HeadacheOverViewHeadachePlace", "HeadachePlace");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<HeadachePlace>("DataModel.HeadacheOverViewHeadachePlace", "HeadachePlace", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="DataModel", Name="HeadachePlace")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class HeadachePlace : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new HeadachePlace object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="headacheOverViewId">Initial value of the HeadacheOverViewId property.</param>
        /// <param name="postion">Initial value of the Postion property.</param>
        /// <param name="specificPlace">Initial value of the SpecificPlace property.</param>
        public static HeadachePlace CreateHeadachePlace(global::System.Int32 id, global::System.Int32 headacheOverViewId, global::System.String postion, global::System.String specificPlace)
        {
            HeadachePlace headachePlace = new HeadachePlace();
            headachePlace.Id = id;
            headachePlace.HeadacheOverViewId = headacheOverViewId;
            headachePlace.Postion = postion;
            headachePlace.SpecificPlace = specificPlace;
            return headachePlace;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 HeadacheOverViewId
        {
            get
            {
                return _HeadacheOverViewId;
            }
            set
            {
                OnHeadacheOverViewIdChanging(value);
                ReportPropertyChanging("HeadacheOverViewId");
                _HeadacheOverViewId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("HeadacheOverViewId");
                OnHeadacheOverViewIdChanged();
            }
        }
        private global::System.Int32 _HeadacheOverViewId;
        partial void OnHeadacheOverViewIdChanging(global::System.Int32 value);
        partial void OnHeadacheOverViewIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Postion
        {
            get
            {
                return _Postion;
            }
            set
            {
                OnPostionChanging(value);
                ReportPropertyChanging("Postion");
                _Postion = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Postion");
                OnPostionChanged();
            }
        }
        private global::System.String _Postion;
        partial void OnPostionChanging(global::System.String value);
        partial void OnPostionChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String SpecificPlace
        {
            get
            {
                return _SpecificPlace;
            }
            set
            {
                OnSpecificPlaceChanging(value);
                ReportPropertyChanging("SpecificPlace");
                _SpecificPlace = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("SpecificPlace");
                OnSpecificPlaceChanged();
            }
        }
        private global::System.String _SpecificPlace;
        partial void OnSpecificPlaceChanging(global::System.String value);
        partial void OnSpecificPlaceChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DataModel", "HeadacheOverViewHeadachePlace", "HeadacheOverView")]
        public HeadacheOverView HeadacheOverView
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<HeadacheOverView>("DataModel.HeadacheOverViewHeadachePlace", "HeadacheOverView").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<HeadacheOverView>("DataModel.HeadacheOverViewHeadachePlace", "HeadacheOverView").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<HeadacheOverView> HeadacheOverViewReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<HeadacheOverView>("DataModel.HeadacheOverViewHeadachePlace", "HeadacheOverView");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<HeadacheOverView>("DataModel.HeadacheOverViewHeadachePlace", "HeadacheOverView", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="DataModel", Name="HeadacheProdrome")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class HeadacheProdrome : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new HeadacheProdrome object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="headacheOverViewId">Initial value of the HeadacheOverViewId property.</param>
        /// <param name="prodrome">Initial value of the Prodrome property.</param>
        public static HeadacheProdrome CreateHeadacheProdrome(global::System.Int32 id, global::System.Int32 headacheOverViewId, global::System.String prodrome)
        {
            HeadacheProdrome headacheProdrome = new HeadacheProdrome();
            headacheProdrome.Id = id;
            headacheProdrome.HeadacheOverViewId = headacheOverViewId;
            headacheProdrome.Prodrome = prodrome;
            return headacheProdrome;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 HeadacheOverViewId
        {
            get
            {
                return _HeadacheOverViewId;
            }
            set
            {
                if (_HeadacheOverViewId != value)
                {
                    OnHeadacheOverViewIdChanging(value);
                    ReportPropertyChanging("HeadacheOverViewId");
                    _HeadacheOverViewId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("HeadacheOverViewId");
                    OnHeadacheOverViewIdChanged();
                }
            }
        }
        private global::System.Int32 _HeadacheOverViewId;
        partial void OnHeadacheOverViewIdChanging(global::System.Int32 value);
        partial void OnHeadacheOverViewIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Prodrome
        {
            get
            {
                return _Prodrome;
            }
            set
            {
                OnProdromeChanging(value);
                ReportPropertyChanging("Prodrome");
                _Prodrome = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Prodrome");
                OnProdromeChanged();
            }
        }
        private global::System.String _Prodrome;
        partial void OnProdromeChanging(global::System.String value);
        partial void OnProdromeChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DataModel", "HeadacheOverViewHeadacheProdrome", "HeadacheOverView")]
        public HeadacheOverView HeadacheOverView
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<HeadacheOverView>("DataModel.HeadacheOverViewHeadacheProdrome", "HeadacheOverView").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<HeadacheOverView>("DataModel.HeadacheOverViewHeadacheProdrome", "HeadacheOverView").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<HeadacheOverView> HeadacheOverViewReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<HeadacheOverView>("DataModel.HeadacheOverViewHeadacheProdrome", "HeadacheOverView");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<HeadacheOverView>("DataModel.HeadacheOverViewHeadacheProdrome", "HeadacheOverView", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="DataModel", Name="PatientBasicInfo")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class PatientBasicInfo : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new PatientBasicInfo object.
        /// </summary>
        /// <param name="pId">Initial value of the PId property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="sex">Initial value of the Sex property.</param>
        /// <param name="eHRID">Initial value of the EHRID property.</param>
        /// <param name="address">Initial value of the Address property.</param>
        /// <param name="phone">Initial value of the Phone property.</param>
        /// <param name="job">Initial value of the Job property.</param>
        /// <param name="education">Initial value of the Education property.</param>
        /// <param name="chefDoctor">Initial value of the ChefDoctor property.</param>
        public static PatientBasicInfo CreatePatientBasicInfo(global::System.Int32 pId, global::System.String name, global::System.String sex, global::System.String eHRID, global::System.String address, global::System.String phone, global::System.String job, global::System.String education, global::System.String chefDoctor)
        {
            PatientBasicInfo patientBasicInfo = new PatientBasicInfo();
            patientBasicInfo.PId = pId;
            patientBasicInfo.Name = name;
            patientBasicInfo.Sex = sex;
            patientBasicInfo.EHRID = eHRID;
            patientBasicInfo.Address = address;
            patientBasicInfo.Phone = phone;
            patientBasicInfo.Job = job;
            patientBasicInfo.Education = education;
            patientBasicInfo.ChefDoctor = chefDoctor;
            return patientBasicInfo;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 PId
        {
            get
            {
                return _PId;
            }
            set
            {
                if (_PId != value)
                {
                    OnPIdChanging(value);
                    ReportPropertyChanging("PId");
                    _PId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("PId");
                    OnPIdChanged();
                }
            }
        }
        private global::System.Int32 _PId;
        partial void OnPIdChanging(global::System.Int32 value);
        partial void OnPIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Sex
        {
            get
            {
                return _Sex;
            }
            set
            {
                OnSexChanging(value);
                ReportPropertyChanging("Sex");
                _Sex = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Sex");
                OnSexChanged();
            }
        }
        private global::System.String _Sex;
        partial void OnSexChanging(global::System.String value);
        partial void OnSexChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String EHRID
        {
            get
            {
                return _EHRID;
            }
            set
            {
                OnEHRIDChanging(value);
                ReportPropertyChanging("EHRID");
                _EHRID = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("EHRID");
                OnEHRIDChanged();
            }
        }
        private global::System.String _EHRID;
        partial void OnEHRIDChanging(global::System.String value);
        partial void OnEHRIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Address
        {
            get
            {
                return _Address;
            }
            set
            {
                OnAddressChanging(value);
                ReportPropertyChanging("Address");
                _Address = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Address");
                OnAddressChanged();
            }
        }
        private global::System.String _Address;
        partial void OnAddressChanging(global::System.String value);
        partial void OnAddressChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Phone
        {
            get
            {
                return _Phone;
            }
            set
            {
                OnPhoneChanging(value);
                ReportPropertyChanging("Phone");
                _Phone = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Phone");
                OnPhoneChanged();
            }
        }
        private global::System.String _Phone;
        partial void OnPhoneChanging(global::System.String value);
        partial void OnPhoneChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Job
        {
            get
            {
                return _Job;
            }
            set
            {
                OnJobChanging(value);
                ReportPropertyChanging("Job");
                _Job = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Job");
                OnJobChanged();
            }
        }
        private global::System.String _Job;
        partial void OnJobChanging(global::System.String value);
        partial void OnJobChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Education
        {
            get
            {
                return _Education;
            }
            set
            {
                OnEducationChanging(value);
                ReportPropertyChanging("Education");
                _Education = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Education");
                OnEducationChanged();
            }
        }
        private global::System.String _Education;
        partial void OnEducationChanging(global::System.String value);
        partial void OnEducationChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String ChefDoctor
        {
            get
            {
                return _ChefDoctor;
            }
            set
            {
                OnChefDoctorChanging(value);
                ReportPropertyChanging("ChefDoctor");
                _ChefDoctor = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("ChefDoctor");
                OnChefDoctorChanged();
            }
        }
        private global::System.String _ChefDoctor;
        partial void OnChefDoctorChanging(global::System.String value);
        partial void OnChefDoctorChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DataModel", "PatientBasicInfoVisitRecord", "VisitRecord")]
        public EntityCollection<VisitRecord> VisitRecord
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<VisitRecord>("DataModel.PatientBasicInfoVisitRecord", "VisitRecord");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<VisitRecord>("DataModel.PatientBasicInfoVisitRecord", "VisitRecord", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="DataModel", Name="PreviousDrug")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class PreviousDrug : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new PreviousDrug object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="visitRecordId">Initial value of the VisitRecordId property.</param>
        /// <param name="drugCategory">Initial value of the DrugCategory property.</param>
        /// <param name="drugname">Initial value of the Drugname property.</param>
        /// <param name="drugTimeMonth">Initial value of the DrugTimeMonth property.</param>
        /// <param name="drugTimeYear">Initial value of the DrugTimeYear property.</param>
        public static PreviousDrug CreatePreviousDrug(global::System.Int32 id, global::System.Int32 visitRecordId, global::System.String drugCategory, global::System.String drugname, global::System.String drugTimeMonth, global::System.String drugTimeYear)
        {
            PreviousDrug previousDrug = new PreviousDrug();
            previousDrug.Id = id;
            previousDrug.VisitRecordId = visitRecordId;
            previousDrug.DrugCategory = drugCategory;
            previousDrug.Drugname = drugname;
            previousDrug.DrugTimeMonth = drugTimeMonth;
            previousDrug.DrugTimeYear = drugTimeYear;
            return previousDrug;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 VisitRecordId
        {
            get
            {
                return _VisitRecordId;
            }
            set
            {
                OnVisitRecordIdChanging(value);
                ReportPropertyChanging("VisitRecordId");
                _VisitRecordId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("VisitRecordId");
                OnVisitRecordIdChanged();
            }
        }
        private global::System.Int32 _VisitRecordId;
        partial void OnVisitRecordIdChanging(global::System.Int32 value);
        partial void OnVisitRecordIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String DrugCategory
        {
            get
            {
                return _DrugCategory;
            }
            set
            {
                OnDrugCategoryChanging(value);
                ReportPropertyChanging("DrugCategory");
                _DrugCategory = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("DrugCategory");
                OnDrugCategoryChanged();
            }
        }
        private global::System.String _DrugCategory;
        partial void OnDrugCategoryChanging(global::System.String value);
        partial void OnDrugCategoryChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Drugname
        {
            get
            {
                return _Drugname;
            }
            set
            {
                OnDrugnameChanging(value);
                ReportPropertyChanging("Drugname");
                _Drugname = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Drugname");
                OnDrugnameChanged();
            }
        }
        private global::System.String _Drugname;
        partial void OnDrugnameChanging(global::System.String value);
        partial void OnDrugnameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String DrugTimeMonth
        {
            get
            {
                return _DrugTimeMonth;
            }
            set
            {
                OnDrugTimeMonthChanging(value);
                ReportPropertyChanging("DrugTimeMonth");
                _DrugTimeMonth = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("DrugTimeMonth");
                OnDrugTimeMonthChanged();
            }
        }
        private global::System.String _DrugTimeMonth;
        partial void OnDrugTimeMonthChanging(global::System.String value);
        partial void OnDrugTimeMonthChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String DrugTimeYear
        {
            get
            {
                return _DrugTimeYear;
            }
            set
            {
                OnDrugTimeYearChanging(value);
                ReportPropertyChanging("DrugTimeYear");
                _DrugTimeYear = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("DrugTimeYear");
                OnDrugTimeYearChanged();
            }
        }
        private global::System.String _DrugTimeYear;
        partial void OnDrugTimeYearChanging(global::System.String value);
        partial void OnDrugTimeYearChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DataModel", "VisitRecordPreviousDrug", "VisitRecord")]
        public VisitRecord VisitRecord
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<VisitRecord>("DataModel.VisitRecordPreviousDrug", "VisitRecord").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<VisitRecord>("DataModel.VisitRecordPreviousDrug", "VisitRecord").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<VisitRecord> VisitRecordReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<VisitRecord>("DataModel.VisitRecordPreviousDrug", "VisitRecord");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<VisitRecord>("DataModel.VisitRecordPreviousDrug", "VisitRecord", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="DataModel", Name="RelateInformation")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class RelateInformation : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new RelateInformation object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="liftestlye">Initial value of the Liftestlye property.</param>
        /// <param name="predisposingMitigating">Initial value of the PredisposingMitigating property.</param>
        /// <param name="smimarRelative">Initial value of the SmimarRelative property.</param>
        public static RelateInformation CreateRelateInformation(global::System.Int32 id, Mutiplestring liftestlye, Mutiple predisposingMitigating, Mutiplestring smimarRelative)
        {
            RelateInformation relateInformation = new RelateInformation();
            relateInformation.Id = id;
            relateInformation.Liftestlye = StructuralObject.VerifyComplexObjectIsNotNull(liftestlye, "Liftestlye");
            relateInformation.PredisposingMitigating = StructuralObject.VerifyComplexObjectIsNotNull(predisposingMitigating, "PredisposingMitigating");
            relateInformation.SmimarRelative = StructuralObject.VerifyComplexObjectIsNotNull(smimarRelative, "SmimarRelative");
            return relateInformation;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();

        #endregion
        #region Complex Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmComplexPropertyAttribute()]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        [XmlElement(IsNullable=true)]
        [SoapElement(IsNullable=true)]
        [DataMemberAttribute()]
        public Mutiplestring Liftestlye
        {
            get
            {
                _Liftestlye = GetValidValue(_Liftestlye, "Liftestlye", false, _LiftestlyeInitialized);
                _LiftestlyeInitialized = true;
                return _Liftestlye;
            }
            set
            {
                OnLiftestlyeChanging(value);
                ReportPropertyChanging("Liftestlye");
                _Liftestlye = SetValidValue(_Liftestlye, value, "Liftestlye");
                _LiftestlyeInitialized = true;
                ReportPropertyChanged("Liftestlye");
                OnLiftestlyeChanged();
            }
        }
        private Mutiplestring _Liftestlye;
        private bool _LiftestlyeInitialized;
        partial void OnLiftestlyeChanging(Mutiplestring value);
        partial void OnLiftestlyeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmComplexPropertyAttribute()]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        [XmlElement(IsNullable=true)]
        [SoapElement(IsNullable=true)]
        [DataMemberAttribute()]
        public Mutiple PredisposingMitigating
        {
            get
            {
                _PredisposingMitigating = GetValidValue(_PredisposingMitigating, "PredisposingMitigating", false, _PredisposingMitigatingInitialized);
                _PredisposingMitigatingInitialized = true;
                return _PredisposingMitigating;
            }
            set
            {
                OnPredisposingMitigatingChanging(value);
                ReportPropertyChanging("PredisposingMitigating");
                _PredisposingMitigating = SetValidValue(_PredisposingMitigating, value, "PredisposingMitigating");
                _PredisposingMitigatingInitialized = true;
                ReportPropertyChanged("PredisposingMitigating");
                OnPredisposingMitigatingChanged();
            }
        }
        private Mutiple _PredisposingMitigating;
        private bool _PredisposingMitigatingInitialized;
        partial void OnPredisposingMitigatingChanging(Mutiple value);
        partial void OnPredisposingMitigatingChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmComplexPropertyAttribute()]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        [XmlElement(IsNullable=true)]
        [SoapElement(IsNullable=true)]
        [DataMemberAttribute()]
        public Mutiplestring SmimarRelative
        {
            get
            {
                _SmimarRelative = GetValidValue(_SmimarRelative, "SmimarRelative", false, _SmimarRelativeInitialized);
                _SmimarRelativeInitialized = true;
                return _SmimarRelative;
            }
            set
            {
                OnSmimarRelativeChanging(value);
                ReportPropertyChanging("SmimarRelative");
                _SmimarRelative = SetValidValue(_SmimarRelative, value, "SmimarRelative");
                _SmimarRelativeInitialized = true;
                ReportPropertyChanged("SmimarRelative");
                OnSmimarRelativeChanged();
            }
        }
        private Mutiplestring _SmimarRelative;
        private bool _SmimarRelativeInitialized;
        partial void OnSmimarRelativeChanging(Mutiplestring value);
        partial void OnSmimarRelativeChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DataModel", "VisitRecordlifestylePredisposing", "VisitRecord")]
        public VisitRecord VisitRecord
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<VisitRecord>("DataModel.VisitRecordlifestylePredisposing", "VisitRecord").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<VisitRecord>("DataModel.VisitRecordlifestylePredisposing", "VisitRecord").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<VisitRecord> VisitRecordReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<VisitRecord>("DataModel.VisitRecordlifestylePredisposing", "VisitRecord");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<VisitRecord>("DataModel.VisitRecordlifestylePredisposing", "VisitRecord", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="DataModel", Name="VisitRecord")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class VisitRecord : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new VisitRecord object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="visitID">Initial value of the VisitID property.</param>
        /// <param name="viistDate">Initial value of the ViistDate property.</param>
        /// <param name="doctor">Initial value of the Doctor property.</param>
        /// <param name="patientBasicInfoPId">Initial value of the PatientBasicInfoPId property.</param>
        public static VisitRecord CreateVisitRecord(global::System.Int32 id, global::System.String visitID, global::System.String viistDate, global::System.String doctor, global::System.Int32 patientBasicInfoPId)
        {
            VisitRecord visitRecord = new VisitRecord();
            visitRecord.Id = id;
            visitRecord.VisitID = visitID;
            visitRecord.ViistDate = viistDate;
            visitRecord.Doctor = doctor;
            visitRecord.PatientBasicInfoPId = patientBasicInfoPId;
            return visitRecord;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String VisitID
        {
            get
            {
                return _VisitID;
            }
            set
            {
                OnVisitIDChanging(value);
                ReportPropertyChanging("VisitID");
                _VisitID = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("VisitID");
                OnVisitIDChanged();
            }
        }
        private global::System.String _VisitID;
        partial void OnVisitIDChanging(global::System.String value);
        partial void OnVisitIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String ViistDate
        {
            get
            {
                return _ViistDate;
            }
            set
            {
                OnViistDateChanging(value);
                ReportPropertyChanging("ViistDate");
                _ViistDate = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("ViistDate");
                OnViistDateChanged();
            }
        }
        private global::System.String _ViistDate;
        partial void OnViistDateChanging(global::System.String value);
        partial void OnViistDateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Doctor
        {
            get
            {
                return _Doctor;
            }
            set
            {
                OnDoctorChanging(value);
                ReportPropertyChanging("Doctor");
                _Doctor = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Doctor");
                OnDoctorChanged();
            }
        }
        private global::System.String _Doctor;
        partial void OnDoctorChanging(global::System.String value);
        partial void OnDoctorChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 PatientBasicInfoPId
        {
            get
            {
                return _PatientBasicInfoPId;
            }
            set
            {
                OnPatientBasicInfoPIdChanging(value);
                ReportPropertyChanging("PatientBasicInfoPId");
                _PatientBasicInfoPId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("PatientBasicInfoPId");
                OnPatientBasicInfoPIdChanged();
            }
        }
        private global::System.Int32 _PatientBasicInfoPId;
        partial void OnPatientBasicInfoPIdChanging(global::System.Int32 value);
        partial void OnPatientBasicInfoPIdChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DataModel", "PatientBasicInfoVisitRecord", "PatientBasicInfo")]
        public PatientBasicInfo PatientBasicInfo
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<PatientBasicInfo>("DataModel.PatientBasicInfoVisitRecord", "PatientBasicInfo").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<PatientBasicInfo>("DataModel.PatientBasicInfoVisitRecord", "PatientBasicInfo").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<PatientBasicInfo> PatientBasicInfoReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<PatientBasicInfo>("DataModel.PatientBasicInfoVisitRecord", "PatientBasicInfo");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<PatientBasicInfo>("DataModel.PatientBasicInfoVisitRecord", "PatientBasicInfo", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DataModel", "VisitRecordHeadacheDrug", "HeadacheDrug")]
        public EntityCollection<HeadacheDrug> HeadacheDrug
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<HeadacheDrug>("DataModel.VisitRecordHeadacheDrug", "HeadacheDrug");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<HeadacheDrug>("DataModel.VisitRecordHeadacheDrug", "HeadacheDrug", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DataModel", "VisitRecordHeadacheOverView", "HeadacheOverView")]
        public HeadacheOverView HeadacheOverView
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<HeadacheOverView>("DataModel.VisitRecordHeadacheOverView", "HeadacheOverView").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<HeadacheOverView>("DataModel.VisitRecordHeadacheOverView", "HeadacheOverView").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<HeadacheOverView> HeadacheOverViewReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<HeadacheOverView>("DataModel.VisitRecordHeadacheOverView", "HeadacheOverView");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<HeadacheOverView>("DataModel.VisitRecordHeadacheOverView", "HeadacheOverView", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DataModel", "VisitRecordHeacheDiagnosis", "HeacheDiagnosis")]
        public EntityCollection<HeacheDiagnosis> HeacheDiagnosis
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<HeacheDiagnosis>("DataModel.VisitRecordHeacheDiagnosis", "HeacheDiagnosis");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<HeacheDiagnosis>("DataModel.VisitRecordHeacheDiagnosis", "HeacheDiagnosis", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DataModel", "VisitRecordPreviousDrug", "PreviousDrug")]
        public EntityCollection<PreviousDrug> PreviousDrug
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<PreviousDrug>("DataModel.VisitRecordPreviousDrug", "PreviousDrug");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<PreviousDrug>("DataModel.VisitRecordPreviousDrug", "PreviousDrug", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DataModel", "VisitRecordlifestylePredisposing", "lifestylePredisposing")]
        public RelateInformation lifestylePredisposing
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RelateInformation>("DataModel.VisitRecordlifestylePredisposing", "lifestylePredisposing").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RelateInformation>("DataModel.VisitRecordlifestylePredisposing", "lifestylePredisposing").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<RelateInformation> lifestylePredisposingReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RelateInformation>("DataModel.VisitRecordlifestylePredisposing", "lifestylePredisposing");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<RelateInformation>("DataModel.VisitRecordlifestylePredisposing", "lifestylePredisposing", value);
                }
            }
        }

        #endregion
    }

    #endregion
    #region ComplexTypes
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmComplexTypeAttribute(NamespaceName="DataModel", Name="Mutiple")]
    [DataContractAttribute(IsReference=true)]
    [Serializable()]
    public partial class Mutiple : ComplexObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Mutiple object.
        /// </summary>
        /// <param name="shower">Initial value of the Shower property.</param>
        /// <param name="activity">Initial value of the Activity property.</param>
        /// <param name="menstruation">Initial value of the Menstruation property.</param>
        /// <param name="coffee">Initial value of the Coffee property.</param>
        public static Mutiple CreateMutiple(global::System.Boolean shower, global::System.Boolean activity, global::System.Boolean menstruation, global::System.Boolean coffee)
        {
            Mutiple mutiple = new Mutiple();
            mutiple.Shower = shower;
            mutiple.Activity = activity;
            mutiple.Menstruation = menstruation;
            mutiple.Coffee = coffee;
            return mutiple;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean Shower
        {
            get
            {
                return _Shower;
            }
            set
            {
                OnShowerChanging(value);
                ReportPropertyChanging("Shower");
                _Shower = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Shower");
                OnShowerChanged();
            }
        }
        private global::System.Boolean _Shower;
        partial void OnShowerChanging(global::System.Boolean value);
        partial void OnShowerChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean Activity
        {
            get
            {
                return _Activity;
            }
            set
            {
                OnActivityChanging(value);
                ReportPropertyChanging("Activity");
                _Activity = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Activity");
                OnActivityChanged();
            }
        }
        private global::System.Boolean _Activity;
        partial void OnActivityChanging(global::System.Boolean value);
        partial void OnActivityChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean Menstruation
        {
            get
            {
                return _Menstruation;
            }
            set
            {
                OnMenstruationChanging(value);
                ReportPropertyChanging("Menstruation");
                _Menstruation = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Menstruation");
                OnMenstruationChanged();
            }
        }
        private global::System.Boolean _Menstruation;
        partial void OnMenstruationChanging(global::System.Boolean value);
        partial void OnMenstruationChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean Coffee
        {
            get
            {
                return _Coffee;
            }
            set
            {
                OnCoffeeChanging(value);
                ReportPropertyChanging("Coffee");
                _Coffee = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Coffee");
                OnCoffeeChanged();
            }
        }
        private global::System.Boolean _Coffee;
        partial void OnCoffeeChanging(global::System.Boolean value);
        partial void OnCoffeeChanged();

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmComplexTypeAttribute(NamespaceName="DataModel", Name="Mutiple1")]
    [DataContractAttribute(IsReference=true)]
    [Serializable()]
    public partial class Mutiple1 : ComplexObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Mutiple1 object.
        /// </summary>
        /// <param name="shower">Initial value of the Shower property.</param>
        /// <param name="mother">Initial value of the mother property.</param>
        /// <param name="sister">Initial value of the sister property.</param>
        /// <param name="father">Initial value of the father property.</param>
        /// <param name="brother">Initial value of the brother property.</param>
        /// <param name="grandma">Initial value of the grandma property.</param>
        /// <param name="grandpa">Initial value of the grandpa property.</param>
        public static Mutiple1 CreateMutiple1(global::System.Boolean shower, global::System.Boolean mother, global::System.Boolean sister, global::System.Boolean father, global::System.Boolean brother, global::System.Boolean grandma, global::System.Boolean grandpa)
        {
            Mutiple1 mutiple1 = new Mutiple1();
            mutiple1.Shower = shower;
            mutiple1.mother = mother;
            mutiple1.sister = sister;
            mutiple1.father = father;
            mutiple1.brother = brother;
            mutiple1.grandma = grandma;
            mutiple1.grandpa = grandpa;
            return mutiple1;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean Shower
        {
            get
            {
                return _Shower;
            }
            set
            {
                OnShowerChanging(value);
                ReportPropertyChanging("Shower");
                _Shower = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Shower");
                OnShowerChanged();
            }
        }
        private global::System.Boolean _Shower;
        partial void OnShowerChanging(global::System.Boolean value);
        partial void OnShowerChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean mother
        {
            get
            {
                return _mother;
            }
            set
            {
                OnmotherChanging(value);
                ReportPropertyChanging("mother");
                _mother = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("mother");
                OnmotherChanged();
            }
        }
        private global::System.Boolean _mother;
        partial void OnmotherChanging(global::System.Boolean value);
        partial void OnmotherChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean sister
        {
            get
            {
                return _sister;
            }
            set
            {
                OnsisterChanging(value);
                ReportPropertyChanging("sister");
                _sister = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("sister");
                OnsisterChanged();
            }
        }
        private global::System.Boolean _sister;
        partial void OnsisterChanging(global::System.Boolean value);
        partial void OnsisterChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean father
        {
            get
            {
                return _father;
            }
            set
            {
                OnfatherChanging(value);
                ReportPropertyChanging("father");
                _father = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("father");
                OnfatherChanged();
            }
        }
        private global::System.Boolean _father;
        partial void OnfatherChanging(global::System.Boolean value);
        partial void OnfatherChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean brother
        {
            get
            {
                return _brother;
            }
            set
            {
                OnbrotherChanging(value);
                ReportPropertyChanging("brother");
                _brother = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("brother");
                OnbrotherChanged();
            }
        }
        private global::System.Boolean _brother;
        partial void OnbrotherChanging(global::System.Boolean value);
        partial void OnbrotherChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean grandma
        {
            get
            {
                return _grandma;
            }
            set
            {
                OngrandmaChanging(value);
                ReportPropertyChanging("grandma");
                _grandma = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("grandma");
                OngrandmaChanged();
            }
        }
        private global::System.Boolean _grandma;
        partial void OngrandmaChanging(global::System.Boolean value);
        partial void OngrandmaChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean grandpa
        {
            get
            {
                return _grandpa;
            }
            set
            {
                OngrandpaChanging(value);
                ReportPropertyChanging("grandpa");
                _grandpa = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("grandpa");
                OngrandpaChanged();
            }
        }
        private global::System.Boolean _grandpa;
        partial void OngrandpaChanging(global::System.Boolean value);
        partial void OngrandpaChanged();

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmComplexTypeAttribute(NamespaceName="DataModel", Name="Mutiplestring")]
    [DataContractAttribute(IsReference=true)]
    [Serializable()]
    public partial class Mutiplestring : ComplexObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Mutiplestring object.
        /// </summary>
        /// <param name="drink">Initial value of the drink property.</param>
        /// <param name="smoke">Initial value of the smoke property.</param>
        /// <param name="coffee">Initial value of the coffee property.</param>
        /// <param name="tea">Initial value of the tea property.</param>
        public static Mutiplestring CreateMutiplestring(global::System.Boolean drink, global::System.Boolean smoke, global::System.Boolean coffee, global::System.Boolean tea)
        {
            Mutiplestring mutiplestring = new Mutiplestring();
            mutiplestring.drink = drink;
            mutiplestring.smoke = smoke;
            mutiplestring.coffee = coffee;
            mutiplestring.tea = tea;
            return mutiplestring;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean drink
        {
            get
            {
                return _drink;
            }
            set
            {
                OndrinkChanging(value);
                ReportPropertyChanging("drink");
                _drink = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("drink");
                OndrinkChanged();
            }
        }
        private global::System.Boolean _drink;
        partial void OndrinkChanging(global::System.Boolean value);
        partial void OndrinkChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean smoke
        {
            get
            {
                return _smoke;
            }
            set
            {
                OnsmokeChanging(value);
                ReportPropertyChanging("smoke");
                _smoke = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("smoke");
                OnsmokeChanged();
            }
        }
        private global::System.Boolean _smoke;
        partial void OnsmokeChanging(global::System.Boolean value);
        partial void OnsmokeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean coffee
        {
            get
            {
                return _coffee;
            }
            set
            {
                OncoffeeChanging(value);
                ReportPropertyChanging("coffee");
                _coffee = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("coffee");
                OncoffeeChanged();
            }
        }
        private global::System.Boolean _coffee;
        partial void OncoffeeChanging(global::System.Boolean value);
        partial void OncoffeeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean tea
        {
            get
            {
                return _tea;
            }
            set
            {
                OnteaChanging(value);
                ReportPropertyChanging("tea");
                _tea = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("tea");
                OnteaChanged();
            }
        }
        private global::System.Boolean _tea;
        partial void OnteaChanging(global::System.Boolean value);
        partial void OnteaChanged();

        #endregion
    }

    #endregion
    
}
